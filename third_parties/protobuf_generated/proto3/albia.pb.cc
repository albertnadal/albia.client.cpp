// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3/albia.proto

#include "proto3/albia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class DeviceRecordMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceRecordMsg>
      _instance;
  double doublevalue_;
  float floatvalue_;
  ::google::protobuf::int32 int32value_;
  ::google::protobuf::int64 int64value_;
  ::google::protobuf::uint32 uint32value_;
  ::google::protobuf::uint64 uint64value_;
  bool boolvalue_;
  ::google::protobuf::internal::ArenaStringPtr stringvalue_;
  ::google::protobuf::internal::ArenaStringPtr bytestringvalue_;
} _DeviceRecordMsg_default_instance_;
class DeviceEventMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceEventMsg>
      _instance;
} _DeviceEventMsg_default_instance_;
namespace protobuf_proto3_2falbia_2eproto {
void InitDefaultsDeviceRecordMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto3_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::_DeviceRecordMsg_default_instance_;
    new (ptr) ::DeviceRecordMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceRecordMsg::InitAsDefaultInstance();
}

void InitDefaultsDeviceRecordMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeviceRecordMsgImpl);
}

void InitDefaultsDeviceEventMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto3_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::_DeviceEventMsg_default_instance_;
    new (ptr) ::DeviceEventMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceEventMsg::InitAsDefaultInstance();
}

void InitDefaultsDeviceEventMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeviceEventMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, date_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, doublevalue_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, floatvalue_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, int32value_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, int64value_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, uint32value_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, uint64value_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, boolvalue_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, stringvalue_),
  offsetof(::DeviceRecordMsgDefaultTypeInternal, bytestringvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceRecordMsg, record_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceEventMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceEventMsg, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceEventMsg, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceEventMsg, targetdeviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceEventMsg, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DeviceEventMsg, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DeviceRecordMsg)},
  { 19, -1, sizeof(::DeviceEventMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceRecordMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceEventMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto3/albia.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022proto3/albia.proto\032\026proto3/timestamp.p"
      "roto\"\327\003\n\017DeviceRecordMsg\022\020\n\010deviceId\030\001 \001"
      "(\r\022\013\n\003key\030\002 \001(\t\022)\n\004type\030\003 \001(\0162\033.DeviceRe"
      "cordMsg.RecordType\022(\n\004date\030\004 \001(\0132\032.googl"
      "e.protobuf.Timestamp\022\025\n\013doubleValue\030\005 \001("
      "\001H\000\022\024\n\nfloatValue\030\006 \001(\002H\000\022\024\n\nint32Value\030"
      "\007 \001(\005H\000\022\024\n\nint64Value\030\010 \001(\003H\000\022\025\n\013uint32V"
      "alue\030\t \001(\rH\000\022\025\n\013uint64Value\030\n \001(\004H\000\022\023\n\tb"
      "oolValue\030\013 \001(\010H\000\022\025\n\013stringValue\030\014 \001(\tH\000\022"
      "\031\n\017byteStringValue\030\r \001(\014H\000\"r\n\nRecordType"
      "\022\n\n\006DOUBLE\020\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022\t\n\005IN"
      "T64\020\003\022\n\n\006UINT32\020\004\022\n\n\006UINT64\020\005\022\010\n\004BOOL\020\006\022"
      "\n\n\006STRING\020\007\022\t\n\005BYTES\020\010B\016\n\014record_value\"\202"
      "\001\n\016DeviceEventMsg\022\016\n\006action\030\001 \001(\t\022\020\n\010dev"
      "iceId\030\002 \001(\r\022\026\n\016targetDeviceId\030\003 \001(\r\022(\n\004d"
      "ate\030\004 \001(\0132\032.google.protobuf.Timestamp\022\014\n"
      "\004data\030\005 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 659);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto3/albia.proto", &protobuf_RegisterTypes);
  ::protobuf_proto3_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto3_2falbia_2eproto
const ::google::protobuf::EnumDescriptor* DeviceRecordMsg_RecordType_descriptor() {
  protobuf_proto3_2falbia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto3_2falbia_2eproto::file_level_enum_descriptors[0];
}
bool DeviceRecordMsg_RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRecordMsg_RecordType DeviceRecordMsg::DOUBLE;
const DeviceRecordMsg_RecordType DeviceRecordMsg::FLOAT;
const DeviceRecordMsg_RecordType DeviceRecordMsg::INT32;
const DeviceRecordMsg_RecordType DeviceRecordMsg::INT64;
const DeviceRecordMsg_RecordType DeviceRecordMsg::UINT32;
const DeviceRecordMsg_RecordType DeviceRecordMsg::UINT64;
const DeviceRecordMsg_RecordType DeviceRecordMsg::BOOL;
const DeviceRecordMsg_RecordType DeviceRecordMsg::STRING;
const DeviceRecordMsg_RecordType DeviceRecordMsg::BYTES;
const DeviceRecordMsg_RecordType DeviceRecordMsg::RecordType_MIN;
const DeviceRecordMsg_RecordType DeviceRecordMsg::RecordType_MAX;
const int DeviceRecordMsg::RecordType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DeviceRecordMsg::InitAsDefaultInstance() {
  ::_DeviceRecordMsg_default_instance_._instance.get_mutable()->date_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_DeviceRecordMsg_default_instance_.doublevalue_ = 0;
  ::_DeviceRecordMsg_default_instance_.floatvalue_ = 0;
  ::_DeviceRecordMsg_default_instance_.int32value_ = 0;
  ::_DeviceRecordMsg_default_instance_.int64value_ = GOOGLE_LONGLONG(0);
  ::_DeviceRecordMsg_default_instance_.uint32value_ = 0u;
  ::_DeviceRecordMsg_default_instance_.uint64value_ = GOOGLE_ULONGLONG(0);
  ::_DeviceRecordMsg_default_instance_.boolvalue_ = false;
  ::_DeviceRecordMsg_default_instance_.stringvalue_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::_DeviceRecordMsg_default_instance_.bytestringvalue_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRecordMsg::clear_date() {
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRecordMsg::kDeviceIdFieldNumber;
const int DeviceRecordMsg::kKeyFieldNumber;
const int DeviceRecordMsg::kTypeFieldNumber;
const int DeviceRecordMsg::kDateFieldNumber;
const int DeviceRecordMsg::kDoubleValueFieldNumber;
const int DeviceRecordMsg::kFloatValueFieldNumber;
const int DeviceRecordMsg::kInt32ValueFieldNumber;
const int DeviceRecordMsg::kInt64ValueFieldNumber;
const int DeviceRecordMsg::kUint32ValueFieldNumber;
const int DeviceRecordMsg::kUint64ValueFieldNumber;
const int DeviceRecordMsg::kBoolValueFieldNumber;
const int DeviceRecordMsg::kStringValueFieldNumber;
const int DeviceRecordMsg::kByteStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRecordMsg::DeviceRecordMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto3_2falbia_2eproto::InitDefaultsDeviceRecordMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceRecordMsg)
}
DeviceRecordMsg::DeviceRecordMsg(const DeviceRecordMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_date()) {
    date_ = new ::google::protobuf::Timestamp(*from.date_);
  } else {
    date_ = NULL;
  }
  ::memcpy(&deviceid_, &from.deviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&deviceid_)) + sizeof(type_));
  clear_has_record_value();
  switch (from.record_value_case()) {
    case kDoubleValue: {
      set_doublevalue(from.doublevalue());
      break;
    }
    case kFloatValue: {
      set_floatvalue(from.floatvalue());
      break;
    }
    case kInt32Value: {
      set_int32value(from.int32value());
      break;
    }
    case kInt64Value: {
      set_int64value(from.int64value());
      break;
    }
    case kUint32Value: {
      set_uint32value(from.uint32value());
      break;
    }
    case kUint64Value: {
      set_uint64value(from.uint64value());
      break;
    }
    case kBoolValue: {
      set_boolvalue(from.boolvalue());
      break;
    }
    case kStringValue: {
      set_stringvalue(from.stringvalue());
      break;
    }
    case kByteStringValue: {
      set_bytestringvalue(from.bytestringvalue());
      break;
    }
    case RECORD_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DeviceRecordMsg)
}

void DeviceRecordMsg::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&date_)) + sizeof(type_));
  clear_has_record_value();
  _cached_size_ = 0;
}

DeviceRecordMsg::~DeviceRecordMsg() {
  // @@protoc_insertion_point(destructor:DeviceRecordMsg)
  SharedDtor();
}

void DeviceRecordMsg::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
  if (has_record_value()) {
    clear_record_value();
  }
}

void DeviceRecordMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceRecordMsg::descriptor() {
  ::protobuf_proto3_2falbia_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto3_2falbia_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceRecordMsg& DeviceRecordMsg::default_instance() {
  ::protobuf_proto3_2falbia_2eproto::InitDefaultsDeviceRecordMsg();
  return *internal_default_instance();
}

DeviceRecordMsg* DeviceRecordMsg::New(::google::protobuf::Arena* arena) const {
  DeviceRecordMsg* n = new DeviceRecordMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceRecordMsg::clear_record_value() {
// @@protoc_insertion_point(one_of_clear_start:DeviceRecordMsg)
  switch (record_value_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kUint32Value: {
      // No need to clear
      break;
    }
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      record_value_.stringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kByteStringValue: {
      record_value_.bytestringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case RECORD_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_VALUE_NOT_SET;
}


void DeviceRecordMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceRecordMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
  ::memset(&deviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&deviceid_)) + sizeof(type_));
  clear_record_value();
  _internal_metadata_.Clear();
}

bool DeviceRecordMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceRecordMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deviceId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceRecordMsg.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DeviceRecordMsg.RecordType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::DeviceRecordMsg_RecordType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double doubleValue = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &record_value_.doublevalue_)));
          set_has_doublevalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float floatValue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &record_value_.floatvalue_)));
          set_has_floatvalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int32Value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_value_.int32value_)));
          set_has_int32value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int64Value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &record_value_.int64value_)));
          set_has_int64value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uint32Value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_value_.uint32value_)));
          set_has_uint32value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uint64Value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_value_.uint64value_)));
          set_has_uint64value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolValue = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          clear_record_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_value_.boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stringValue = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stringvalue().data(), static_cast<int>(this->stringvalue().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceRecordMsg.stringValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byteStringValue = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytestringvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceRecordMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceRecordMsg)
  return false;
#undef DO_
}

void DeviceRecordMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceRecordMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deviceId = 1;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deviceid(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceRecordMsg.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // .DeviceRecordMsg.RecordType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .google.protobuf.Timestamp date = 4;
  if (this->has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->date_, output);
  }

  // double doubleValue = 5;
  if (has_doublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->doublevalue(), output);
  }

  // float floatValue = 6;
  if (has_floatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->floatvalue(), output);
  }

  // int32 int32Value = 7;
  if (has_int32value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->int32value(), output);
  }

  // int64 int64Value = 8;
  if (has_int64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->int64value(), output);
  }

  // uint32 uint32Value = 9;
  if (has_uint32value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uint32value(), output);
  }

  // uint64 uint64Value = 10;
  if (has_uint64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->uint64value(), output);
  }

  // bool boolValue = 11;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->boolvalue(), output);
  }

  // string stringValue = 12;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stringvalue().data(), static_cast<int>(this->stringvalue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceRecordMsg.stringValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->stringvalue(), output);
  }

  // bytes byteStringValue = 13;
  if (has_bytestringvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->bytestringvalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceRecordMsg)
}

::google::protobuf::uint8* DeviceRecordMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceRecordMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deviceId = 1;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deviceid(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceRecordMsg.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // .DeviceRecordMsg.RecordType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .google.protobuf.Timestamp date = 4;
  if (this->has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->date_, deterministic, target);
  }

  // double doubleValue = 5;
  if (has_doublevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->doublevalue(), target);
  }

  // float floatValue = 6;
  if (has_floatvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->floatvalue(), target);
  }

  // int32 int32Value = 7;
  if (has_int32value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->int32value(), target);
  }

  // int64 int64Value = 8;
  if (has_int64value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->int64value(), target);
  }

  // uint32 uint32Value = 9;
  if (has_uint32value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uint32value(), target);
  }

  // uint64 uint64Value = 10;
  if (has_uint64value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->uint64value(), target);
  }

  // bool boolValue = 11;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->boolvalue(), target);
  }

  // string stringValue = 12;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stringvalue().data(), static_cast<int>(this->stringvalue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceRecordMsg.stringValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->stringvalue(), target);
  }

  // bytes byteStringValue = 13;
  if (has_bytestringvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->bytestringvalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceRecordMsg)
  return target;
}

size_t DeviceRecordMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceRecordMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .google.protobuf.Timestamp date = 4;
  if (this->has_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->date_);
  }

  // uint32 deviceId = 1;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deviceid());
  }

  // .DeviceRecordMsg.RecordType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (record_value_case()) {
    // double doubleValue = 5;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // float floatValue = 6;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // int32 int32Value = 7;
    case kInt32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32value());
      break;
    }
    // int64 int64Value = 8;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64value());
      break;
    }
    // uint32 uint32Value = 9;
    case kUint32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32value());
      break;
    }
    // uint64 uint64Value = 10;
    case kUint64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64value());
      break;
    }
    // bool boolValue = 11;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // string stringValue = 12;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringvalue());
      break;
    }
    // bytes byteStringValue = 13;
    case kByteStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytestringvalue());
      break;
    }
    case RECORD_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceRecordMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceRecordMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceRecordMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceRecordMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceRecordMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceRecordMsg)
    MergeFrom(*source);
  }
}

void DeviceRecordMsg::MergeFrom(const DeviceRecordMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceRecordMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_date()) {
    mutable_date()->::google::protobuf::Timestamp::MergeFrom(from.date());
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.record_value_case()) {
    case kDoubleValue: {
      set_doublevalue(from.doublevalue());
      break;
    }
    case kFloatValue: {
      set_floatvalue(from.floatvalue());
      break;
    }
    case kInt32Value: {
      set_int32value(from.int32value());
      break;
    }
    case kInt64Value: {
      set_int64value(from.int64value());
      break;
    }
    case kUint32Value: {
      set_uint32value(from.uint32value());
      break;
    }
    case kUint64Value: {
      set_uint64value(from.uint64value());
      break;
    }
    case kBoolValue: {
      set_boolvalue(from.boolvalue());
      break;
    }
    case kStringValue: {
      set_stringvalue(from.stringvalue());
      break;
    }
    case kByteStringValue: {
      set_bytestringvalue(from.bytestringvalue());
      break;
    }
    case RECORD_VALUE_NOT_SET: {
      break;
    }
  }
}

void DeviceRecordMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceRecordMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRecordMsg::CopyFrom(const DeviceRecordMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceRecordMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRecordMsg::IsInitialized() const {
  return true;
}

void DeviceRecordMsg::Swap(DeviceRecordMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceRecordMsg::InternalSwap(DeviceRecordMsg* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(date_, other->date_);
  swap(deviceid_, other->deviceid_);
  swap(type_, other->type_);
  swap(record_value_, other->record_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceRecordMsg::GetMetadata() const {
  protobuf_proto3_2falbia_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto3_2falbia_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceEventMsg::InitAsDefaultInstance() {
  ::_DeviceEventMsg_default_instance_._instance.get_mutable()->date_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void DeviceEventMsg::clear_date() {
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceEventMsg::kActionFieldNumber;
const int DeviceEventMsg::kDeviceIdFieldNumber;
const int DeviceEventMsg::kTargetDeviceIdFieldNumber;
const int DeviceEventMsg::kDateFieldNumber;
const int DeviceEventMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceEventMsg::DeviceEventMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto3_2falbia_2eproto::InitDefaultsDeviceEventMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceEventMsg)
}
DeviceEventMsg::DeviceEventMsg(const DeviceEventMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action().size() > 0) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_date()) {
    date_ = new ::google::protobuf::Timestamp(*from.date_);
  } else {
    date_ = NULL;
  }
  ::memcpy(&deviceid_, &from.deviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetdeviceid_) -
    reinterpret_cast<char*>(&deviceid_)) + sizeof(targetdeviceid_));
  // @@protoc_insertion_point(copy_constructor:DeviceEventMsg)
}

void DeviceEventMsg::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetdeviceid_) -
      reinterpret_cast<char*>(&date_)) + sizeof(targetdeviceid_));
  _cached_size_ = 0;
}

DeviceEventMsg::~DeviceEventMsg() {
  // @@protoc_insertion_point(destructor:DeviceEventMsg)
  SharedDtor();
}

void DeviceEventMsg::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_;
}

void DeviceEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceEventMsg::descriptor() {
  ::protobuf_proto3_2falbia_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto3_2falbia_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceEventMsg& DeviceEventMsg::default_instance() {
  ::protobuf_proto3_2falbia_2eproto::InitDefaultsDeviceEventMsg();
  return *internal_default_instance();
}

DeviceEventMsg* DeviceEventMsg::New(::google::protobuf::Arena* arena) const {
  DeviceEventMsg* n = new DeviceEventMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceEventMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceEventMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && date_ != NULL) {
    delete date_;
  }
  date_ = NULL;
  ::memset(&deviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetdeviceid_) -
      reinterpret_cast<char*>(&deviceid_)) + sizeof(targetdeviceid_));
  _internal_metadata_.Clear();
}

bool DeviceEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceEventMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceEventMsg.action"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deviceId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 targetDeviceId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetdeviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceEventMsg.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceEventMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceEventMsg)
  return false;
#undef DO_
}

void DeviceEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceEventMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceEventMsg.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // uint32 deviceId = 2;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // uint32 targetDeviceId = 3;
  if (this->targetdeviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetdeviceid(), output);
  }

  // .google.protobuf.Timestamp date = 4;
  if (this->has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->date_, output);
  }

  // string data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceEventMsg.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceEventMsg)
}

::google::protobuf::uint8* DeviceEventMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceEventMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceEventMsg.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // uint32 deviceId = 2;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // uint32 targetDeviceId = 3;
  if (this->targetdeviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetdeviceid(), target);
  }

  // .google.protobuf.Timestamp date = 4;
  if (this->has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->date_, deterministic, target);
  }

  // string data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceEventMsg.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceEventMsg)
  return target;
}

size_t DeviceEventMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceEventMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string action = 1;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  // string data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .google.protobuf.Timestamp date = 4;
  if (this->has_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->date_);
  }

  // uint32 deviceId = 2;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deviceid());
  }

  // uint32 targetDeviceId = 3;
  if (this->targetdeviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetdeviceid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceEventMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceEventMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceEventMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceEventMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceEventMsg)
    MergeFrom(*source);
  }
}

void DeviceEventMsg::MergeFrom(const DeviceEventMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceEventMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_date()) {
    mutable_date()->::google::protobuf::Timestamp::MergeFrom(from.date());
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.targetdeviceid() != 0) {
    set_targetdeviceid(from.targetdeviceid());
  }
}

void DeviceEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceEventMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceEventMsg::CopyFrom(const DeviceEventMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceEventMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEventMsg::IsInitialized() const {
  return true;
}

void DeviceEventMsg::Swap(DeviceEventMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceEventMsg::InternalSwap(DeviceEventMsg* other) {
  using std::swap;
  action_.Swap(&other->action_);
  data_.Swap(&other->data_);
  swap(date_, other->date_);
  swap(deviceid_, other->deviceid_);
  swap(targetdeviceid_, other->targetdeviceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceEventMsg::GetMetadata() const {
  protobuf_proto3_2falbia_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto3_2falbia_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
