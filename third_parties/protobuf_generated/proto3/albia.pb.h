// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3/albia.proto

#ifndef PROTOBUF_proto3_2falbia_2eproto__INCLUDED
#define PROTOBUF_proto3_2falbia_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_proto3_2falbia_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDeviceRecordMsgImpl();
void InitDefaultsDeviceRecordMsg();
void InitDefaultsDeviceEventMsgImpl();
void InitDefaultsDeviceEventMsg();
inline void InitDefaults() {
  InitDefaultsDeviceRecordMsg();
  InitDefaultsDeviceEventMsg();
}
}  // namespace protobuf_proto3_2falbia_2eproto
class DeviceEventMsg;
class DeviceEventMsgDefaultTypeInternal;
extern DeviceEventMsgDefaultTypeInternal _DeviceEventMsg_default_instance_;
class DeviceRecordMsg;
class DeviceRecordMsgDefaultTypeInternal;
extern DeviceRecordMsgDefaultTypeInternal _DeviceRecordMsg_default_instance_;

enum DeviceRecordMsg_RecordType {
  DeviceRecordMsg_RecordType_DOUBLE = 0,
  DeviceRecordMsg_RecordType_FLOAT = 1,
  DeviceRecordMsg_RecordType_INT32 = 2,
  DeviceRecordMsg_RecordType_INT64 = 3,
  DeviceRecordMsg_RecordType_UINT32 = 4,
  DeviceRecordMsg_RecordType_UINT64 = 5,
  DeviceRecordMsg_RecordType_BOOL = 6,
  DeviceRecordMsg_RecordType_STRING = 7,
  DeviceRecordMsg_RecordType_BYTES = 8,
  DeviceRecordMsg_RecordType_DeviceRecordMsg_RecordType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceRecordMsg_RecordType_DeviceRecordMsg_RecordType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceRecordMsg_RecordType_IsValid(int value);
const DeviceRecordMsg_RecordType DeviceRecordMsg_RecordType_RecordType_MIN = DeviceRecordMsg_RecordType_DOUBLE;
const DeviceRecordMsg_RecordType DeviceRecordMsg_RecordType_RecordType_MAX = DeviceRecordMsg_RecordType_BYTES;
const int DeviceRecordMsg_RecordType_RecordType_ARRAYSIZE = DeviceRecordMsg_RecordType_RecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceRecordMsg_RecordType_descriptor();
inline const ::std::string& DeviceRecordMsg_RecordType_Name(DeviceRecordMsg_RecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceRecordMsg_RecordType_descriptor(), value);
}
inline bool DeviceRecordMsg_RecordType_Parse(
    const ::std::string& name, DeviceRecordMsg_RecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceRecordMsg_RecordType>(
    DeviceRecordMsg_RecordType_descriptor(), name, value);
}
// ===================================================================

class DeviceRecordMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceRecordMsg) */ {
 public:
  DeviceRecordMsg();
  virtual ~DeviceRecordMsg();

  DeviceRecordMsg(const DeviceRecordMsg& from);

  inline DeviceRecordMsg& operator=(const DeviceRecordMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceRecordMsg(DeviceRecordMsg&& from) noexcept
    : DeviceRecordMsg() {
    *this = ::std::move(from);
  }

  inline DeviceRecordMsg& operator=(DeviceRecordMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceRecordMsg& default_instance();

  enum RecordValueCase {
    kDoubleValue = 5,
    kFloatValue = 6,
    kInt32Value = 7,
    kInt64Value = 8,
    kUint32Value = 9,
    kUint64Value = 10,
    kBoolValue = 11,
    kStringValue = 12,
    kByteStringValue = 13,
    RECORD_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRecordMsg* internal_default_instance() {
    return reinterpret_cast<const DeviceRecordMsg*>(
               &_DeviceRecordMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DeviceRecordMsg* other);
  friend void swap(DeviceRecordMsg& a, DeviceRecordMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceRecordMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceRecordMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceRecordMsg& from);
  void MergeFrom(const DeviceRecordMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceRecordMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DeviceRecordMsg_RecordType RecordType;
  static const RecordType DOUBLE =
    DeviceRecordMsg_RecordType_DOUBLE;
  static const RecordType FLOAT =
    DeviceRecordMsg_RecordType_FLOAT;
  static const RecordType INT32 =
    DeviceRecordMsg_RecordType_INT32;
  static const RecordType INT64 =
    DeviceRecordMsg_RecordType_INT64;
  static const RecordType UINT32 =
    DeviceRecordMsg_RecordType_UINT32;
  static const RecordType UINT64 =
    DeviceRecordMsg_RecordType_UINT64;
  static const RecordType BOOL =
    DeviceRecordMsg_RecordType_BOOL;
  static const RecordType STRING =
    DeviceRecordMsg_RecordType_STRING;
  static const RecordType BYTES =
    DeviceRecordMsg_RecordType_BYTES;
  static inline bool RecordType_IsValid(int value) {
    return DeviceRecordMsg_RecordType_IsValid(value);
  }
  static const RecordType RecordType_MIN =
    DeviceRecordMsg_RecordType_RecordType_MIN;
  static const RecordType RecordType_MAX =
    DeviceRecordMsg_RecordType_RecordType_MAX;
  static const int RecordType_ARRAYSIZE =
    DeviceRecordMsg_RecordType_RecordType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RecordType_descriptor() {
    return DeviceRecordMsg_RecordType_descriptor();
  }
  static inline const ::std::string& RecordType_Name(RecordType value) {
    return DeviceRecordMsg_RecordType_Name(value);
  }
  static inline bool RecordType_Parse(const ::std::string& name,
      RecordType* value) {
    return DeviceRecordMsg_RecordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .google.protobuf.Timestamp date = 4;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  const ::google::protobuf::Timestamp& date() const;
  ::google::protobuf::Timestamp* release_date();
  ::google::protobuf::Timestamp* mutable_date();
  void set_allocated_date(::google::protobuf::Timestamp* date);

  // uint32 deviceId = 1;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint32 deviceid() const;
  void set_deviceid(::google::protobuf::uint32 value);

  // .DeviceRecordMsg.RecordType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::DeviceRecordMsg_RecordType type() const;
  void set_type(::DeviceRecordMsg_RecordType value);

  // double doubleValue = 5;
  private:
  bool has_doublevalue() const;
  public:
  void clear_doublevalue();
  static const int kDoubleValueFieldNumber = 5;
  double doublevalue() const;
  void set_doublevalue(double value);

  // float floatValue = 6;
  private:
  bool has_floatvalue() const;
  public:
  void clear_floatvalue();
  static const int kFloatValueFieldNumber = 6;
  float floatvalue() const;
  void set_floatvalue(float value);

  // int32 int32Value = 7;
  private:
  bool has_int32value() const;
  public:
  void clear_int32value();
  static const int kInt32ValueFieldNumber = 7;
  ::google::protobuf::int32 int32value() const;
  void set_int32value(::google::protobuf::int32 value);

  // int64 int64Value = 8;
  private:
  bool has_int64value() const;
  public:
  void clear_int64value();
  static const int kInt64ValueFieldNumber = 8;
  ::google::protobuf::int64 int64value() const;
  void set_int64value(::google::protobuf::int64 value);

  // uint32 uint32Value = 9;
  private:
  bool has_uint32value() const;
  public:
  void clear_uint32value();
  static const int kUint32ValueFieldNumber = 9;
  ::google::protobuf::uint32 uint32value() const;
  void set_uint32value(::google::protobuf::uint32 value);

  // uint64 uint64Value = 10;
  private:
  bool has_uint64value() const;
  public:
  void clear_uint64value();
  static const int kUint64ValueFieldNumber = 10;
  ::google::protobuf::uint64 uint64value() const;
  void set_uint64value(::google::protobuf::uint64 value);

  // bool boolValue = 11;
  private:
  bool has_boolvalue() const;
  public:
  void clear_boolvalue();
  static const int kBoolValueFieldNumber = 11;
  bool boolvalue() const;
  void set_boolvalue(bool value);

  // string stringValue = 12;
  private:
  bool has_stringvalue() const;
  public:
  void clear_stringvalue();
  static const int kStringValueFieldNumber = 12;
  const ::std::string& stringvalue() const;
  void set_stringvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_stringvalue(::std::string&& value);
  #endif
  void set_stringvalue(const char* value);
  void set_stringvalue(const char* value, size_t size);
  ::std::string* mutable_stringvalue();
  ::std::string* release_stringvalue();
  void set_allocated_stringvalue(::std::string* stringvalue);

  // bytes byteStringValue = 13;
  private:
  bool has_bytestringvalue() const;
  public:
  void clear_bytestringvalue();
  static const int kByteStringValueFieldNumber = 13;
  const ::std::string& bytestringvalue() const;
  void set_bytestringvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_bytestringvalue(::std::string&& value);
  #endif
  void set_bytestringvalue(const char* value);
  void set_bytestringvalue(const void* value, size_t size);
  ::std::string* mutable_bytestringvalue();
  ::std::string* release_bytestringvalue();
  void set_allocated_bytestringvalue(::std::string* bytestringvalue);

  RecordValueCase record_value_case() const;
  // @@protoc_insertion_point(class_scope:DeviceRecordMsg)
 private:
  void set_has_doublevalue();
  void set_has_floatvalue();
  void set_has_int32value();
  void set_has_int64value();
  void set_has_uint32value();
  void set_has_uint64value();
  void set_has_boolvalue();
  void set_has_stringvalue();
  void set_has_bytestringvalue();

  inline bool has_record_value() const;
  void clear_record_value();
  inline void clear_has_record_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::Timestamp* date_;
  ::google::protobuf::uint32 deviceid_;
  int type_;
  union RecordValueUnion {
    RecordValueUnion() {}
    double doublevalue_;
    float floatvalue_;
    ::google::protobuf::int32 int32value_;
    ::google::protobuf::int64 int64value_;
    ::google::protobuf::uint32 uint32value_;
    ::google::protobuf::uint64 uint64value_;
    bool boolvalue_;
    ::google::protobuf::internal::ArenaStringPtr stringvalue_;
    ::google::protobuf::internal::ArenaStringPtr bytestringvalue_;
  } record_value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto3_2falbia_2eproto::TableStruct;
  friend void ::protobuf_proto3_2falbia_2eproto::InitDefaultsDeviceRecordMsgImpl();
};
// -------------------------------------------------------------------

class DeviceEventMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceEventMsg) */ {
 public:
  DeviceEventMsg();
  virtual ~DeviceEventMsg();

  DeviceEventMsg(const DeviceEventMsg& from);

  inline DeviceEventMsg& operator=(const DeviceEventMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceEventMsg(DeviceEventMsg&& from) noexcept
    : DeviceEventMsg() {
    *this = ::std::move(from);
  }

  inline DeviceEventMsg& operator=(DeviceEventMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceEventMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceEventMsg* internal_default_instance() {
    return reinterpret_cast<const DeviceEventMsg*>(
               &_DeviceEventMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DeviceEventMsg* other);
  friend void swap(DeviceEventMsg& a, DeviceEventMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceEventMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceEventMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceEventMsg& from);
  void MergeFrom(const DeviceEventMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceEventMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // string data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.protobuf.Timestamp date = 4;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  const ::google::protobuf::Timestamp& date() const;
  ::google::protobuf::Timestamp* release_date();
  ::google::protobuf::Timestamp* mutable_date();
  void set_allocated_date(::google::protobuf::Timestamp* date);

  // uint32 deviceId = 2;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  ::google::protobuf::uint32 deviceid() const;
  void set_deviceid(::google::protobuf::uint32 value);

  // uint32 targetDeviceId = 3;
  void clear_targetdeviceid();
  static const int kTargetDeviceIdFieldNumber = 3;
  ::google::protobuf::uint32 targetdeviceid() const;
  void set_targetdeviceid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DeviceEventMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::Timestamp* date_;
  ::google::protobuf::uint32 deviceid_;
  ::google::protobuf::uint32 targetdeviceid_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto3_2falbia_2eproto::TableStruct;
  friend void ::protobuf_proto3_2falbia_2eproto::InitDefaultsDeviceEventMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceRecordMsg

// uint32 deviceId = 1;
inline void DeviceRecordMsg::clear_deviceid() {
  deviceid_ = 0u;
}
inline ::google::protobuf::uint32 DeviceRecordMsg::deviceid() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.deviceId)
  return deviceid_;
}
inline void DeviceRecordMsg::set_deviceid(::google::protobuf::uint32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.deviceId)
}

// string key = 2;
inline void DeviceRecordMsg::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceRecordMsg::key() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.key)
  return key_.GetNoArena();
}
inline void DeviceRecordMsg::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.key)
}
#if LANG_CXX11
inline void DeviceRecordMsg::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceRecordMsg.key)
}
#endif
inline void DeviceRecordMsg::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceRecordMsg.key)
}
inline void DeviceRecordMsg::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceRecordMsg.key)
}
inline ::std::string* DeviceRecordMsg::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:DeviceRecordMsg.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRecordMsg::release_key() {
  // @@protoc_insertion_point(field_release:DeviceRecordMsg.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRecordMsg::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:DeviceRecordMsg.key)
}

// .DeviceRecordMsg.RecordType type = 3;
inline void DeviceRecordMsg::clear_type() {
  type_ = 0;
}
inline ::DeviceRecordMsg_RecordType DeviceRecordMsg::type() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.type)
  return static_cast< ::DeviceRecordMsg_RecordType >(type_);
}
inline void DeviceRecordMsg::set_type(::DeviceRecordMsg_RecordType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.type)
}

// .google.protobuf.Timestamp date = 4;
inline bool DeviceRecordMsg::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeviceRecordMsg::date() const {
  const ::google::protobuf::Timestamp* p = date_;
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeviceRecordMsg::release_date() {
  // @@protoc_insertion_point(field_release:DeviceRecordMsg.date)
  
  ::google::protobuf::Timestamp* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceRecordMsg::mutable_date() {
  
  if (date_ == NULL) {
    date_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:DeviceRecordMsg.date)
  return date_;
}
inline void DeviceRecordMsg::set_allocated_date(::google::protobuf::Timestamp* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:DeviceRecordMsg.date)
}

// double doubleValue = 5;
inline bool DeviceRecordMsg::has_doublevalue() const {
  return record_value_case() == kDoubleValue;
}
inline void DeviceRecordMsg::set_has_doublevalue() {
  _oneof_case_[0] = kDoubleValue;
}
inline void DeviceRecordMsg::clear_doublevalue() {
  if (has_doublevalue()) {
    record_value_.doublevalue_ = 0;
    clear_has_record_value();
  }
}
inline double DeviceRecordMsg::doublevalue() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.doubleValue)
  if (has_doublevalue()) {
    return record_value_.doublevalue_;
  }
  return 0;
}
inline void DeviceRecordMsg::set_doublevalue(double value) {
  if (!has_doublevalue()) {
    clear_record_value();
    set_has_doublevalue();
  }
  record_value_.doublevalue_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.doubleValue)
}

// float floatValue = 6;
inline bool DeviceRecordMsg::has_floatvalue() const {
  return record_value_case() == kFloatValue;
}
inline void DeviceRecordMsg::set_has_floatvalue() {
  _oneof_case_[0] = kFloatValue;
}
inline void DeviceRecordMsg::clear_floatvalue() {
  if (has_floatvalue()) {
    record_value_.floatvalue_ = 0;
    clear_has_record_value();
  }
}
inline float DeviceRecordMsg::floatvalue() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.floatValue)
  if (has_floatvalue()) {
    return record_value_.floatvalue_;
  }
  return 0;
}
inline void DeviceRecordMsg::set_floatvalue(float value) {
  if (!has_floatvalue()) {
    clear_record_value();
    set_has_floatvalue();
  }
  record_value_.floatvalue_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.floatValue)
}

// int32 int32Value = 7;
inline bool DeviceRecordMsg::has_int32value() const {
  return record_value_case() == kInt32Value;
}
inline void DeviceRecordMsg::set_has_int32value() {
  _oneof_case_[0] = kInt32Value;
}
inline void DeviceRecordMsg::clear_int32value() {
  if (has_int32value()) {
    record_value_.int32value_ = 0;
    clear_has_record_value();
  }
}
inline ::google::protobuf::int32 DeviceRecordMsg::int32value() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.int32Value)
  if (has_int32value()) {
    return record_value_.int32value_;
  }
  return 0;
}
inline void DeviceRecordMsg::set_int32value(::google::protobuf::int32 value) {
  if (!has_int32value()) {
    clear_record_value();
    set_has_int32value();
  }
  record_value_.int32value_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.int32Value)
}

// int64 int64Value = 8;
inline bool DeviceRecordMsg::has_int64value() const {
  return record_value_case() == kInt64Value;
}
inline void DeviceRecordMsg::set_has_int64value() {
  _oneof_case_[0] = kInt64Value;
}
inline void DeviceRecordMsg::clear_int64value() {
  if (has_int64value()) {
    record_value_.int64value_ = GOOGLE_LONGLONG(0);
    clear_has_record_value();
  }
}
inline ::google::protobuf::int64 DeviceRecordMsg::int64value() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.int64Value)
  if (has_int64value()) {
    return record_value_.int64value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void DeviceRecordMsg::set_int64value(::google::protobuf::int64 value) {
  if (!has_int64value()) {
    clear_record_value();
    set_has_int64value();
  }
  record_value_.int64value_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.int64Value)
}

// uint32 uint32Value = 9;
inline bool DeviceRecordMsg::has_uint32value() const {
  return record_value_case() == kUint32Value;
}
inline void DeviceRecordMsg::set_has_uint32value() {
  _oneof_case_[0] = kUint32Value;
}
inline void DeviceRecordMsg::clear_uint32value() {
  if (has_uint32value()) {
    record_value_.uint32value_ = 0u;
    clear_has_record_value();
  }
}
inline ::google::protobuf::uint32 DeviceRecordMsg::uint32value() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.uint32Value)
  if (has_uint32value()) {
    return record_value_.uint32value_;
  }
  return 0u;
}
inline void DeviceRecordMsg::set_uint32value(::google::protobuf::uint32 value) {
  if (!has_uint32value()) {
    clear_record_value();
    set_has_uint32value();
  }
  record_value_.uint32value_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.uint32Value)
}

// uint64 uint64Value = 10;
inline bool DeviceRecordMsg::has_uint64value() const {
  return record_value_case() == kUint64Value;
}
inline void DeviceRecordMsg::set_has_uint64value() {
  _oneof_case_[0] = kUint64Value;
}
inline void DeviceRecordMsg::clear_uint64value() {
  if (has_uint64value()) {
    record_value_.uint64value_ = GOOGLE_ULONGLONG(0);
    clear_has_record_value();
  }
}
inline ::google::protobuf::uint64 DeviceRecordMsg::uint64value() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.uint64Value)
  if (has_uint64value()) {
    return record_value_.uint64value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void DeviceRecordMsg::set_uint64value(::google::protobuf::uint64 value) {
  if (!has_uint64value()) {
    clear_record_value();
    set_has_uint64value();
  }
  record_value_.uint64value_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.uint64Value)
}

// bool boolValue = 11;
inline bool DeviceRecordMsg::has_boolvalue() const {
  return record_value_case() == kBoolValue;
}
inline void DeviceRecordMsg::set_has_boolvalue() {
  _oneof_case_[0] = kBoolValue;
}
inline void DeviceRecordMsg::clear_boolvalue() {
  if (has_boolvalue()) {
    record_value_.boolvalue_ = false;
    clear_has_record_value();
  }
}
inline bool DeviceRecordMsg::boolvalue() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.boolValue)
  if (has_boolvalue()) {
    return record_value_.boolvalue_;
  }
  return false;
}
inline void DeviceRecordMsg::set_boolvalue(bool value) {
  if (!has_boolvalue()) {
    clear_record_value();
    set_has_boolvalue();
  }
  record_value_.boolvalue_ = value;
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.boolValue)
}

// string stringValue = 12;
inline bool DeviceRecordMsg::has_stringvalue() const {
  return record_value_case() == kStringValue;
}
inline void DeviceRecordMsg::set_has_stringvalue() {
  _oneof_case_[0] = kStringValue;
}
inline void DeviceRecordMsg::clear_stringvalue() {
  if (has_stringvalue()) {
    record_value_.stringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_record_value();
  }
}
inline const ::std::string& DeviceRecordMsg::stringvalue() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.stringValue)
  if (has_stringvalue()) {
    return record_value_.stringvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DeviceRecordMsg::set_stringvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.stringValue)
  if (!has_stringvalue()) {
    clear_record_value();
    set_has_stringvalue();
    record_value_.stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.stringValue)
}
#if LANG_CXX11
inline void DeviceRecordMsg::set_stringvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.stringValue)
  if (!has_stringvalue()) {
    clear_record_value();
    set_has_stringvalue();
    record_value_.stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.stringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceRecordMsg.stringValue)
}
#endif
inline void DeviceRecordMsg::set_stringvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_stringvalue()) {
    clear_record_value();
    set_has_stringvalue();
    record_value_.stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceRecordMsg.stringValue)
}
inline void DeviceRecordMsg::set_stringvalue(const char* value, size_t size) {
  if (!has_stringvalue()) {
    clear_record_value();
    set_has_stringvalue();
    record_value_.stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceRecordMsg.stringValue)
}
inline ::std::string* DeviceRecordMsg::mutable_stringvalue() {
  if (!has_stringvalue()) {
    clear_record_value();
    set_has_stringvalue();
    record_value_.stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:DeviceRecordMsg.stringValue)
  return record_value_.stringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRecordMsg::release_stringvalue() {
  // @@protoc_insertion_point(field_release:DeviceRecordMsg.stringValue)
  if (has_stringvalue()) {
    clear_has_record_value();
    return record_value_.stringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DeviceRecordMsg::set_allocated_stringvalue(::std::string* stringvalue) {
  if (!has_stringvalue()) {
    record_value_.stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_record_value();
  if (stringvalue != NULL) {
    set_has_stringvalue();
    record_value_.stringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        stringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceRecordMsg.stringValue)
}

// bytes byteStringValue = 13;
inline bool DeviceRecordMsg::has_bytestringvalue() const {
  return record_value_case() == kByteStringValue;
}
inline void DeviceRecordMsg::set_has_bytestringvalue() {
  _oneof_case_[0] = kByteStringValue;
}
inline void DeviceRecordMsg::clear_bytestringvalue() {
  if (has_bytestringvalue()) {
    record_value_.bytestringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_record_value();
  }
}
inline const ::std::string& DeviceRecordMsg::bytestringvalue() const {
  // @@protoc_insertion_point(field_get:DeviceRecordMsg.byteStringValue)
  if (has_bytestringvalue()) {
    return record_value_.bytestringvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DeviceRecordMsg::set_bytestringvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.byteStringValue)
  if (!has_bytestringvalue()) {
    clear_record_value();
    set_has_bytestringvalue();
    record_value_.bytestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.bytestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.byteStringValue)
}
#if LANG_CXX11
inline void DeviceRecordMsg::set_bytestringvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:DeviceRecordMsg.byteStringValue)
  if (!has_bytestringvalue()) {
    clear_record_value();
    set_has_bytestringvalue();
    record_value_.bytestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.bytestringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceRecordMsg.byteStringValue)
}
#endif
inline void DeviceRecordMsg::set_bytestringvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bytestringvalue()) {
    clear_record_value();
    set_has_bytestringvalue();
    record_value_.bytestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.bytestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceRecordMsg.byteStringValue)
}
inline void DeviceRecordMsg::set_bytestringvalue(const void* value, size_t size) {
  if (!has_bytestringvalue()) {
    clear_record_value();
    set_has_bytestringvalue();
    record_value_.bytestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  record_value_.bytestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceRecordMsg.byteStringValue)
}
inline ::std::string* DeviceRecordMsg::mutable_bytestringvalue() {
  if (!has_bytestringvalue()) {
    clear_record_value();
    set_has_bytestringvalue();
    record_value_.bytestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:DeviceRecordMsg.byteStringValue)
  return record_value_.bytestringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRecordMsg::release_bytestringvalue() {
  // @@protoc_insertion_point(field_release:DeviceRecordMsg.byteStringValue)
  if (has_bytestringvalue()) {
    clear_has_record_value();
    return record_value_.bytestringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DeviceRecordMsg::set_allocated_bytestringvalue(::std::string* bytestringvalue) {
  if (!has_bytestringvalue()) {
    record_value_.bytestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_record_value();
  if (bytestringvalue != NULL) {
    set_has_bytestringvalue();
    record_value_.bytestringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bytestringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceRecordMsg.byteStringValue)
}

inline bool DeviceRecordMsg::has_record_value() const {
  return record_value_case() != RECORD_VALUE_NOT_SET;
}
inline void DeviceRecordMsg::clear_has_record_value() {
  _oneof_case_[0] = RECORD_VALUE_NOT_SET;
}
inline DeviceRecordMsg::RecordValueCase DeviceRecordMsg::record_value_case() const {
  return DeviceRecordMsg::RecordValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeviceEventMsg

// string action = 1;
inline void DeviceEventMsg::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceEventMsg::action() const {
  // @@protoc_insertion_point(field_get:DeviceEventMsg.action)
  return action_.GetNoArena();
}
inline void DeviceEventMsg::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceEventMsg.action)
}
#if LANG_CXX11
inline void DeviceEventMsg::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceEventMsg.action)
}
#endif
inline void DeviceEventMsg::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceEventMsg.action)
}
inline void DeviceEventMsg::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceEventMsg.action)
}
inline ::std::string* DeviceEventMsg::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:DeviceEventMsg.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceEventMsg::release_action() {
  // @@protoc_insertion_point(field_release:DeviceEventMsg.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceEventMsg::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:DeviceEventMsg.action)
}

// uint32 deviceId = 2;
inline void DeviceEventMsg::clear_deviceid() {
  deviceid_ = 0u;
}
inline ::google::protobuf::uint32 DeviceEventMsg::deviceid() const {
  // @@protoc_insertion_point(field_get:DeviceEventMsg.deviceId)
  return deviceid_;
}
inline void DeviceEventMsg::set_deviceid(::google::protobuf::uint32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:DeviceEventMsg.deviceId)
}

// uint32 targetDeviceId = 3;
inline void DeviceEventMsg::clear_targetdeviceid() {
  targetdeviceid_ = 0u;
}
inline ::google::protobuf::uint32 DeviceEventMsg::targetdeviceid() const {
  // @@protoc_insertion_point(field_get:DeviceEventMsg.targetDeviceId)
  return targetdeviceid_;
}
inline void DeviceEventMsg::set_targetdeviceid(::google::protobuf::uint32 value) {
  
  targetdeviceid_ = value;
  // @@protoc_insertion_point(field_set:DeviceEventMsg.targetDeviceId)
}

// .google.protobuf.Timestamp date = 4;
inline bool DeviceEventMsg::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::google::protobuf::Timestamp& DeviceEventMsg::date() const {
  const ::google::protobuf::Timestamp* p = date_;
  // @@protoc_insertion_point(field_get:DeviceEventMsg.date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DeviceEventMsg::release_date() {
  // @@protoc_insertion_point(field_release:DeviceEventMsg.date)
  
  ::google::protobuf::Timestamp* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DeviceEventMsg::mutable_date() {
  
  if (date_ == NULL) {
    date_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:DeviceEventMsg.date)
  return date_;
}
inline void DeviceEventMsg::set_allocated_date(::google::protobuf::Timestamp* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:DeviceEventMsg.date)
}

// string data = 5;
inline void DeviceEventMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceEventMsg::data() const {
  // @@protoc_insertion_point(field_get:DeviceEventMsg.data)
  return data_.GetNoArena();
}
inline void DeviceEventMsg::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceEventMsg.data)
}
#if LANG_CXX11
inline void DeviceEventMsg::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceEventMsg.data)
}
#endif
inline void DeviceEventMsg::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceEventMsg.data)
}
inline void DeviceEventMsg::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceEventMsg.data)
}
inline ::std::string* DeviceEventMsg::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:DeviceEventMsg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceEventMsg::release_data() {
  // @@protoc_insertion_point(field_release:DeviceEventMsg.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceEventMsg::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:DeviceEventMsg.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DeviceRecordMsg_RecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceRecordMsg_RecordType>() {
  return ::DeviceRecordMsg_RecordType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto3_2falbia_2eproto__INCLUDED
